<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>DevOps Blog</title><link>https://jabinsun.github.io</link><description>好记性不如烂笔头</description><copyright>DevOps Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://jabinsun.github.io</link></image><lastBuildDate>Mon, 24 Jun 2024 06:18:00 +0000</lastBuildDate><managingEditor>DevOps Blog</managingEditor><ttl>60</ttl><webMaster>DevOps Blog</webMaster><item><title>【python】ssl_domain_check.py</title><link>https://jabinsun.github.io/post/%E3%80%90python%E3%80%91ssl_domain_check.py.html</link><description>```python&#13;
import ssl&#13;
import datetime&#13;
import socket&#13;
import openpyxl&#13;
&#13;
&#13;
def get_certificate_expiry_date(hostname):&#13;
    context = ssl.create_default_context()&#13;
    conn = context.wrap_socket(socket.socket(socket.AF_INET), server_hostname=hostname)&#13;
    conn.settimeout(5.0)&#13;
    conn.connect((hostname, 443))&#13;
    cert = conn.getpeercert()&#13;
    conn.close()&#13;
    cert_expiry_date = datetime.datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y GMT')&#13;
    return cert_expiry_date&#13;
&#13;
&#13;
def check_https_support(domain):&#13;
    try:&#13;
        expiry_date = get_certificate_expiry_date(domain)&#13;
        print(f'{domain}: HTTPS 证书到期时间: {expiry_date}')&#13;
    except Exception as e:&#13;
        print(f'{domain}: {e}')&#13;
&#13;
&#13;
workbook = openpyxl.Workbook()&#13;
sheet = workbook.active&#13;
sheet.title = 'HTTPS 证书到期时间'&#13;
sheet['A1'] = '域名'&#13;
sheet['B1'] = 'HTTPS 证书到期时间 or Error'&#13;
&#13;
with open('url.txt', 'r') as file:&#13;
    domains = file.readlines()&#13;
    for i, domain in enumerate(domains, start=2):&#13;
        domain = domain.strip()&#13;
        try:&#13;
            expiry_date = get_certificate_expiry_date(domain)&#13;
            sheet[f'A{i}'] = domain&#13;
            sheet[f'B{i}'] = expiry_date.strftime('%Y-%m-%d %H:%M:%S')&#13;
        except Exception as e:&#13;
            sheet[f'A{i}'] = domain&#13;
            sheet[f'B{i}'] = str(e)&#13;
&#13;
workbook.save('https_expiry_dates_new.xlsx')&#13;
```。</description><guid isPermaLink="true">https://jabinsun.github.io/post/%E3%80%90python%E3%80%91ssl_domain_check.py.html</guid><pubDate>Mon, 24 Jun 2024 06:17:36 +0000</pubDate></item><item><title>【sftp】拆分ssh和sftp服务</title><link>https://jabinsun.github.io/post/%E3%80%90sftp%E3%80%91-chai-fen-ssh-he-sftp-fu-wu.html</link><description>### 分离SSH和SFTP服务&#13;
系统内开启ssh服务和sftp服务都是通过/usr/sbin/sshd这个后台程序监听22端⼝，⽽sftp服务作&#13;
为⼀个⼦服务，是通过/etc/ssh/sshd_config配置⽂件中的Subsystem实现的，如果没有配置&#13;
Subsystem参数，则系统是不能进⾏sftp访问的。</description><guid isPermaLink="true">https://jabinsun.github.io/post/%E3%80%90sftp%E3%80%91-chai-fen-ssh-he-sftp-fu-wu.html</guid><pubDate>Mon, 24 Jun 2024 03:40:32 +0000</pubDate></item><item><title>【jar】start_jar.sh</title><link>https://jabinsun.github.io/post/%E3%80%90jar%E3%80%91start_jar.sh.html</link><description>```shell&#13;
#!/bin/bash&#13;
# start  stop  restart&#13;
#这里可替换为自己的执行程序，其他无需更改&#13;
APP_NAME='xxx.jar'&#13;
CONFIG_NAME='application.properties'&#13;
&#13;
#使用说明，用来提示输入参数&#13;
usage() {&#13;
    echo 'Usage: sh $0 [start|stop|restart|status]'&#13;
    exit 1&#13;
}&#13;
&#13;
#检查程序是否在运行&#13;
is_exist(){&#13;
  pid=`ps -ef|grep $CONFIG_NAME |grep -v grep|awk '{print $2}' `&#13;
  #如果不存在返回1，存在返回0&#13;
  if [ -z '${pid}' ]; then&#13;
   return 1&#13;
  else&#13;
    return 0&#13;
  fi&#13;
}&#13;
&#13;
#启动方法&#13;
start(){&#13;
  is_exist&#13;
  if [ $? -eq '0' ]; then&#13;
    echo '${APP_NAME} is already running. pid=${pid} .'&#13;
  else&#13;
    nohup java -server -jar -Xmx1024m $APP_NAME --spring.config.location=$CONFIG_NAME &gt; /dev/null 2&gt;&amp;1 &amp;&#13;
    echo '${APP_NAME} start success'&#13;
  fi&#13;
}&#13;
&#13;
#停止方法&#13;
stop(){&#13;
  is_exist&#13;
  if [ $? -eq '0' ]; then&#13;
    kill -9 $pid&#13;
  else&#13;
    echo '${APP_NAME} is not running'&#13;
  fi&#13;
}&#13;
&#13;
#输出运行状态&#13;
status(){&#13;
  is_exist&#13;
  if [ $? -eq '0' ]; then&#13;
    echo '${APP_NAME} is running. PID is ${pid}'&#13;
  else&#13;
    echo '${APP_NAME} is not running.'&#13;
  fi&#13;
}&#13;
&#13;
#重启&#13;
restart(){&#13;
  stop&#13;
  start&#13;
}&#13;
&#13;
#根据输入参数，选择执行对应方法，不输入则执行使用说明&#13;
case '$1' in&#13;
  'start')&#13;
    start&#13;
    ;;&#13;
  'stop')&#13;
    stop&#13;
    ;;&#13;
  'status')&#13;
    status&#13;
    ;;&#13;
  'restart')&#13;
    restart&#13;
    ;;&#13;
  *)&#13;
    usage&#13;
    ;;&#13;
esac&#13;
&#13;
```。</description><guid isPermaLink="true">https://jabinsun.github.io/post/%E3%80%90jar%E3%80%91start_jar.sh.html</guid><pubDate>Fri, 21 Jun 2024 08:13:55 +0000</pubDate></item><item><title>【Docerfile】Dockerfile.python</title><link>https://jabinsun.github.io/post/%E3%80%90Docerfile%E3%80%91Dockerfile.python.html</link><description>```Dockerfile&#13;
FROM python:3.10-slim AS builder&#13;
ENV PYTHONDONTWRITEBYTECODE=1&#13;
ENV PYTHONUNBUFFERED=1&#13;
ENV PATH='/app/venv/bin:$PATH'&#13;
WORKDIR /app&#13;
COPY ./requirements.txt .&#13;
RUN python3 -m venv /app/venv &amp;&amp; \&#13;
    /app/venv/bin/pip install \&#13;
    -i https://mirrors.aliyun.com/pypi/simple \&#13;
    --no-warn-script-location \&#13;
    --no-cache-dir \&#13;
    -r requirements.txt&#13;
&#13;
FROM python:3.10-slim-buster&#13;
ENV PYTHONDONTWRITEBYTECODE=1&#13;
ENV PYTHONUNBUFFERED=1&#13;
ENV PATH='/app/venv/bin:$PATH'&#13;
WORKDIR /app&#13;
COPY --from=builder /app/venv /app/venv&#13;
COPY . /app&#13;
EXPOSE 5000&#13;
CMD ['/app/venv/bin/gunicorn', 'app:app', '--bind', '0.0.0.0:5000']&#13;
```&#13;
&#13;
```Dockerfile&#13;
# python:&lt;version&gt;-slim / python:&lt;version&gt;-slim-bullseye / python:&lt;version&gt;-slim-buster&#13;
# ${version} &gt;&gt; ${version}-slim &gt; ${version}-slim-bullseye &gt; ${version}-slim-buster&#13;
FROM python:3.10-slim&#13;
LABEL maintainer='xxx@gmail.com'&#13;
EXPOSE 8000&#13;
# Keeps Python from generating .pyc files in the container&#13;
ENV PYTHONDONTWRITEBYTECODE=1&#13;
# Turns off buffering for easier container logging&#13;
ENV PYTHONUNBUFFERED=1&#13;
# Install pip requirements&#13;
COPY requirements.txt .&#13;
RUN python -m pip install --no-cache-dir --upgrade -r requirements.txt&#13;
WORKDIR /app&#13;
COPY . /app&#13;
# Creates a non-root user with an explicit UID and adds permission to access the /app folder&#13;
RUN adduser -u 5678 --disabled-password --gecos '' appuser &amp;&amp; chown -R appuser /app&#13;
USER appuser&#13;
CMD ['uvicorn', 'shortener_app.main:app', '--host', '0.0.0.0']&#13;
```。</description><guid isPermaLink="true">https://jabinsun.github.io/post/%E3%80%90Docerfile%E3%80%91Dockerfile.python.html</guid><pubDate>Fri, 21 Jun 2024 07:40:13 +0000</pubDate></item><item><title>【Dockerfile】Dockerfile.crontab</title><link>https://jabinsun.github.io/post/%E3%80%90Dockerfile%E3%80%91Dockerfile.crontab.html</link><description>```Dockerfile&#13;
FROM alpine:latest&#13;
ENV SUPERCRONIC_URL=https://github.com/aptible/supercronic/releases/download/v0.1.12/supercronic-linux-amd64 \&#13;
    SUPERCRONIC=supercronic-linux-amd64 \&#13;
    SUPERCRONIC_SHA1SUM=048b95b48b708983effb2e5c935a1ef8483d9e3e&#13;
RUN apk update \&#13;
    &amp;&amp; apk --no-cache add curl \&#13;
    &amp;&amp; curl -fsSLO '$SUPERCRONIC_URL' \&#13;
    &amp;&amp; echo '${SUPERCRONIC_SHA1SUM}  ${SUPERCRONIC}' | sha1sum -c - \&#13;
    &amp;&amp; chmod +x '$SUPERCRONIC' \&#13;
    &amp;&amp; mv '$SUPERCRONIC' '/usr/local/bin/${SUPERCRONIC}' \&#13;
    &amp;&amp; ln -s '/usr/local/bin/${SUPERCRONIC}' /usr/local/bin/supercronic&#13;
COPY cronfile /app/cronfile&#13;
# RUN cron job&#13;
CMD ['/usr/local/bin/supercronic', '-debug', '/app/cronfile']&#13;
```&#13;
&#13;
```shell&#13;
echo '* * * * * date' &gt;&gt; /app/cronfile.log&#13;
```。</description><guid isPermaLink="true">https://jabinsun.github.io/post/%E3%80%90Dockerfile%E3%80%91Dockerfile.crontab.html</guid><pubDate>Fri, 21 Jun 2024 07:36:56 +0000</pubDate></item><item><title>【elasticsearch】es常用命令</title><link>https://jabinsun.github.io/post/%E3%80%90elasticsearch%E3%80%91es-chang-yong-ming-ling.html</link><description>- 检查es集群状态&#13;
```shell&#13;
curl -XGET http://localhost:9200/_cluster/health\?pretty&#13;
```&#13;
&#13;
- 单节点es副本分片设为0&#13;
```shell&#13;
curl -XPUT 'http://localhost:9200/_settings' -H 'content-Type:application/json' -d'&#13;
{&#13;
    'number_of_replicas': 0&#13;
}'&#13;
```&#13;
&#13;
- 查看es所有索引&#13;
```shell&#13;
curl -XGET http://localhost:9200/_cat/indices&#13;
```。</description><guid isPermaLink="true">https://jabinsun.github.io/post/%E3%80%90elasticsearch%E3%80%91es-chang-yong-ming-ling.html</guid><pubDate>Fri, 21 Jun 2024 07:20:25 +0000</pubDate></item><item><title>【jenkins】jenkins清理多余job</title><link>https://jabinsun.github.io/post/%E3%80%90jenkins%E3%80%91jenkins-qing-li-duo-yu-job.html</link><description>```shell&#13;
def jobName = 'item_name'&#13;
def maxNumber = 100&#13;
Jenkins.instance.getItemByFullName(jobName).builds.findAll {&#13;
    it.number &lt;= maxNumber&#13;
}.each {&#13;
    it.delete()&#13;
}&#13;
```。</description><guid isPermaLink="true">https://jabinsun.github.io/post/%E3%80%90jenkins%E3%80%91jenkins-qing-li-duo-yu-job.html</guid><pubDate>Fri, 21 Jun 2024 07:13:56 +0000</pubDate></item><item><title>【etcd】etcd备份</title><link>https://jabinsun.github.io/post/%E3%80%90etcd%E3%80%91etcd-bei-fen.html</link><description>```shell&#13;
#!/bin/bash&#13;
# etcd backup&#13;
# 0 */3 * * * /home/monitor/etcd_backup.sh &gt;&gt; /home/monitor/etcd_backup.log 2&gt;&amp;1&#13;
   &#13;
set -e &#13;
   &#13;
ETCD_CA_CERT='/etc/kubernetes/pki/etcd/ca.crt'  &#13;
ETCD_CERT='/etc/kubernetes/pki/etcd/server.crt'  &#13;
ETCD_KEY='/etc/kubernetes/pki/etcd/server.key'  &#13;
BACKUP_DIR='/var/lib/docker/etcd_backup'  &#13;
DT=$(date +%Y%m%d.%H%M%S)  &#13;
   &#13;
[[ ! -d ${BACKUP_DIR} ]] &amp;&amp; mkdir -p ${BACKUP_DIR}  &#13;
find ${BACKUP_DIR} -name '*.db' -mtime +7 -exec rm -f {} \;  &#13;
   &#13;
ETCDCTL_API=3 /usr/local/bin/etcdctl --endpoints=https://127.0.0.1:2379 \  &#13;
  --cacert='${ETCD_CA_CERT}' --cert='${ETCD_CERT}' --key='${ETCD_KEY}' \  &#13;
  snapshot save '${BACKUP_DIR}/etcd-snapshot-${DT}.db'  &#13;
   &#13;
echo 'Etcd backup success, backup file: ${BACKUP_DIR}/etcd-snapshot-${DT}.db, \  &#13;
  file size: $(du -sh ${BACKUP_DIR}/etcd-snapshot-${DT}.db |awk '{print $1}')'  &#13;
echo&#13;
```。</description><guid isPermaLink="true">https://jabinsun.github.io/post/%E3%80%90etcd%E3%80%91etcd-bei-fen.html</guid><pubDate>Fri, 21 Jun 2024 07:09:29 +0000</pubDate></item><item><title>【openssl】openssl生成随机密码</title><link>https://jabinsun.github.io/post/%E3%80%90openssl%E3%80%91openssl-sheng-cheng-sui-ji-mi-ma.html</link><description>```shell&#13;
# 随机密码&#13;
openssl rand -base64 12&#13;
```。</description><guid isPermaLink="true">https://jabinsun.github.io/post/%E3%80%90openssl%E3%80%91openssl-sheng-cheng-sui-ji-mi-ma.html</guid><pubDate>Fri, 21 Jun 2024 06:59:34 +0000</pubDate></item><item><title>【sftp】sftp连接时无法找到匹配的主机密钥类型</title><link>https://jabinsun.github.io/post/%E3%80%90sftp%E3%80%91sftp-lian-jie-shi-wu-fa-zhao-dao-pi-pei-de-zhu-ji-mi-yao-lei-xing.html</link><description>### 报错 &#13;
&#13;
Unable to negotiate with 1.1.1.1 port 22: no matching host key type found. Their offer: ssh-rsa,ssh-dss&#13;
&#13;
### 环境&#13;
&#13;
CentOS版本：CentOS release 6.5 (Final)&#13;
OpenSSH版本：OpenSSH_5.3p1, OpenSSL 1.0.1e-fips 11 Feb 2013&#13;
OpenSSL版本：OpenSSL 1.0.1e-fips 11 Feb 2013&#13;
&#13;
### 解决&#13;
&#13;
**方法一：**&#13;
&#13;
生成和使用 ECDSA 或 ED25519 主机密钥&#13;
```shell&#13;
ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N ''&#13;
ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ''&#13;
```&#13;
编辑 `/etc/ssh/sshd_config`文件，添加生成的密钥&#13;
```shell&#13;
HostKey /etc/ssh/ssh_host_rsa_key&#13;
HostKey /etc/ssh/ssh_host_dsa_key&#13;
HostKey /etc/ssh/ssh_host_ecdsa_key&#13;
HostKey /etc/ssh/ssh_host_ed25519_key&#13;
```&#13;
重启SSH服务&#13;
```shell&#13;
service sshd restart&#13;
```&#13;
&#13;
**方法二：**&#13;
&#13;
升级 OpenSSH 和 OpenSSL&#13;
&#13;
**方法三：**&#13;
&#13;
客户端配置临时解决方案&#13;
```shell&#13;
sftp -o HostKeyAlgorithms=ssh-rsa,ssh-dss username@hostname&#13;
```&#13;
。</description><guid isPermaLink="true">https://jabinsun.github.io/post/%E3%80%90sftp%E3%80%91sftp-lian-jie-shi-wu-fa-zhao-dao-pi-pei-de-zhu-ji-mi-yao-lei-xing.html</guid><pubDate>Fri, 21 Jun 2024 03:18:05 +0000</pubDate></item></channel></rss>